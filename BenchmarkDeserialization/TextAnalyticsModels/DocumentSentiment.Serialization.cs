// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    public partial class DocumentSentiment : IUtf8JsonDeserializable
    {
        internal static DocumentSentiment DeserializeDocumentSentiment(JsonElement element)
        {
            string id = default;
            DocumentSentimentValue sentiment = default;
            Optional<DocumentStatistics> statistics = default;
            SentimentConfidenceScorePerLabel confidenceScores = default;
            IReadOnlyList<SentenceSentiment> sentences = default;
            IReadOnlyList<TextAnalyticsWarning> warnings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sentiment"))
                {
                    sentiment = property.Value.GetString().ToDocumentSentimentValue();
                    continue;
                }
                if (property.NameEquals("statistics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    statistics = DocumentStatistics.DeserializeDocumentStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("confidenceScores"))
                {
                    confidenceScores = SentimentConfidenceScorePerLabel.DeserializeSentimentConfidenceScorePerLabel(property.Value);
                    continue;
                }
                if (property.NameEquals("sentences"))
                {
                    List<SentenceSentiment> array = new List<SentenceSentiment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SentenceSentiment.DeserializeSentenceSentiment(item));
                    }
                    sentences = array;
                    continue;
                }
                if (property.NameEquals("warnings"))
                {
                    List<TextAnalyticsWarning> array = new List<TextAnalyticsWarning>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TextAnalyticsWarning.DeserializeTextAnalyticsWarning(item));
                    }
                    warnings = array;
                    continue;
                }
            }
            return new DocumentSentiment(id, sentiment, statistics.Value, confidenceScores, sentences, warnings);
        }

        internal static DocumentSentiment Deserialize(ref Utf8JsonReader reader)
        {
            IUtf8JsonDeserializable model = new DocumentSentiment();
            model.Read(ref reader);
            return (DocumentSentiment)model;
        }

        static readonly byte[] b_id = Encoding.UTF8.GetBytes("id");
        static readonly byte[] b_sentiment = Encoding.UTF8.GetBytes("sentiment");
        static readonly byte[] b_statistics = Encoding.UTF8.GetBytes("statistics");
        static readonly byte[] b_confidencescores = Encoding.UTF8.GetBytes("confidenceScores");
        static readonly byte[] b_sentences = Encoding.UTF8.GetBytes("sentences");
        static readonly byte[] b_warnings = Encoding.UTF8.GetBytes("warnings");

        void IUtf8JsonDeserializable.Read(ref Utf8JsonReader reader)
        {
            while (reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        break;

                    case JsonTokenType.EndObject:
                        return;

                    case JsonTokenType.StartArray:
                        break;

                    case JsonTokenType.EndArray:
                        break;

                    case JsonTokenType.PropertyName:
                        {
                            if (reader.ValueTextEquals(b_id))
                            {
                                reader.Skip();
                                Id = reader.GetString();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_sentiment))
                            {
                                reader.Skip();
                                Sentiment = reader.GetString().ToDocumentSentimentValue();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_statistics))
                            {
                                Statistics = DocumentStatistics.Deserialize(ref reader);
                                continue;
                            }

                            if (reader.ValueTextEquals(b_confidencescores))
                            {
                                ConfidenceScores = SentimentConfidenceScorePerLabel.Deserialize(ref reader);
                                continue;
                            }

                            if (reader.ValueTextEquals(b_sentences))
                            {
                                reader.Read();
                                var list = new List<SentenceSentiment>();
                                while (reader.Read() && reader.TokenType != JsonTokenType.EndArray)
                                {
                                    list.Add(SentenceSentiment.Deserialize(ref reader));
                                }
                                Sentences = list.AsReadOnly();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_warnings))
                            {
                                reader.Read();
                                var list = new List<TextAnalyticsWarning>();
                                while (reader.Read() && reader.TokenType != JsonTokenType.EndArray)
                                {
                                    list.Add(TextAnalyticsWarning.Deserialize(ref reader));
                                }
                                Warnings = list.AsReadOnly();
                                continue;
                            }
                        }
                        break;

                    default:
                        throw new NotSupportedException("Not supported token type " + reader.TokenType);
                }
            }
        }
    }
}
