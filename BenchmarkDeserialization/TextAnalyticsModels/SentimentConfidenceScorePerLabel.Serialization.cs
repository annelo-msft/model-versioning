// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    public partial class SentimentConfidenceScorePerLabel : IUtf8JsonDeserializable
    {
        internal static SentimentConfidenceScorePerLabel DeserializeSentimentConfidenceScorePerLabel(JsonElement element)
        {
            double positive = default;
            double neutral = default;
            double negative = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("positive"))
                {
                    positive = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("neutral"))
                {
                    neutral = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("negative"))
                {
                    negative = property.Value.GetDouble();
                    continue;
                }
            }
            return new SentimentConfidenceScorePerLabel(positive, neutral, negative);
        }


        internal static SentimentConfidenceScorePerLabel Deserialize(ref Utf8JsonReader reader)
        {
            IUtf8JsonDeserializable model = new SentimentConfidenceScorePerLabel();
            model.Read(ref reader);
            return (SentimentConfidenceScorePerLabel)model;
        }

        static readonly byte[] b_positive = Encoding.UTF8.GetBytes("positive");
        static readonly byte[] b_neutral = Encoding.UTF8.GetBytes("neutral");
        static readonly byte[] b_negative = Encoding.UTF8.GetBytes("negative");

        void IUtf8JsonDeserializable.Read(ref Utf8JsonReader reader)
        {
            while (reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        break;

                    case JsonTokenType.EndObject:
                        return;

                    case JsonTokenType.StartArray:
                        break;

                    case JsonTokenType.EndArray:
                        break;

                    case JsonTokenType.PropertyName:
                        {
                            if (reader.ValueTextEquals(b_positive))
                            {
                                reader.Skip();
                                Positive = reader.GetDouble();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_neutral))
                            {
                                reader.Skip();
                                Neutral = reader.GetDouble();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_negative))
                            {
                                reader.Skip();
                                Negative = reader.GetDouble();
                                continue;
                            }
                        }
                        break;

                    default:
                        throw new NotSupportedException("Not supported token type " + reader.TokenType);
                }
            }
        }
    }
}
