// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    public partial class TargetRelation : IUtf8JsonDeserializable
    {
        internal static TargetRelation DeserializeTargetRelation(JsonElement element)
        {
            TargetRelationType relationType = default;
            string @ref = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("relationType"))
                {
                    relationType = property.Value.GetString().ToTargetRelationType();
                    continue;
                }
                if (property.NameEquals("ref"))
                {
                    @ref = property.Value.GetString();
                    continue;
                }
            }
            return new TargetRelation(relationType, @ref);
        }


        internal static TargetRelation Deserialize(ref Utf8JsonReader reader)
        {
            IUtf8JsonDeserializable model = new TargetRelation();
            model.Read(ref reader);
            return (TargetRelation)model;
        }

        static readonly byte[] b_relationtype = Encoding.UTF8.GetBytes("relationtype");
        static readonly byte[] b_ref = Encoding.UTF8.GetBytes("ref");

        void IUtf8JsonDeserializable.Read(ref Utf8JsonReader reader)
        {
            while (reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        break;

                    case JsonTokenType.EndObject:
                        return;

                    case JsonTokenType.StartArray:
                        break;

                    case JsonTokenType.EndArray:
                        break;

                    case JsonTokenType.PropertyName:
                        {
                            if (reader.ValueTextEquals(b_relationtype))
                            {
                                reader.Skip();
                                RelationType = reader.GetString().ToTargetRelationType();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_ref))
                            {
                                reader.Skip();
                                Ref = reader.GetString();
                                continue;
                            }
                        }
                        break;

                    default:
                        throw new NotSupportedException("Not supported token type " + reader.TokenType);
                }
            }
        }
    }
}
