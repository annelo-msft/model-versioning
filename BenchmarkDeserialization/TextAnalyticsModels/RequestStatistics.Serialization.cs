// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    public partial class RequestStatistics : IUtf8JsonDeserializable
    {
        internal static RequestStatistics DeserializeRequestStatistics(JsonElement element)
        {
            int documentsCount = default;
            int validDocumentsCount = default;
            int erroneousDocumentsCount = default;
            long transactionsCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("documentsCount"))
                {
                    documentsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("validDocumentsCount"))
                {
                    validDocumentsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("erroneousDocumentsCount"))
                {
                    erroneousDocumentsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("transactionsCount"))
                {
                    transactionsCount = property.Value.GetInt64();
                    continue;
                }
            }
            return new RequestStatistics(documentsCount, validDocumentsCount, erroneousDocumentsCount, transactionsCount);
        }


        internal static RequestStatistics Deserialize(ref Utf8JsonReader reader)
        {
            IUtf8JsonDeserializable model = new RequestStatistics();
            model.Read(ref reader);
            return (RequestStatistics)model;
        }

        static readonly byte[] b_documentscount = Encoding.UTF8.GetBytes("documentsCount");
        static readonly byte[] b_validdocumentscount = Encoding.UTF8.GetBytes("validDocumentsCount");
        static readonly byte[] b_erroneousdocumentscount = Encoding.UTF8.GetBytes("erroneousDocumentsCount");
        static readonly byte[] b_transactionscount = Encoding.UTF8.GetBytes("transactionsCount");

        void IUtf8JsonDeserializable.Read(ref Utf8JsonReader reader)
        {
            while (reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        break;

                    case JsonTokenType.EndObject:
                        return;

                    case JsonTokenType.StartArray:
                        break;

                    case JsonTokenType.EndArray:
                        break;

                    case JsonTokenType.PropertyName:
                        {
                            if (reader.ValueTextEquals(b_documentscount))
                            {
                                reader.Skip();
                                DocumentsCount = reader.GetInt32();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_validdocumentscount))
                            {
                                reader.Skip();
                                ValidDocumentsCount = reader.GetInt32();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_erroneousdocumentscount))
                            {
                                reader.Skip();
                                ErroneousDocumentsCount = reader.GetInt32();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_transactionscount))
                            {
                                reader.Skip();
                                TransactionsCount = reader.GetInt32();
                                continue;
                            }
                        }
                        break;

                    default:
                        throw new NotSupportedException("Not supported token type " + reader.TokenType);
                }
            }
        }
    }
}
