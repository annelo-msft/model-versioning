// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.AI.TextAnalytics.Models
{
    public partial class SentimentResponse : IUtf8JsonDeserializable
    {
        public static SentimentResponse DeserializeSentimentResponse(JsonElement element)
        {
            IReadOnlyList<DocumentSentiment> documents = default;
            IReadOnlyList<DocumentError> errors = default;
            Optional<RequestStatistics> statistics = default;
            string modelVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("documents"))
                {
                    List<DocumentSentiment> array = new List<DocumentSentiment>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentSentiment.DeserializeDocumentSentiment(item));
                    }
                    documents = array;
                    continue;
                }
                if (property.NameEquals("errors"))
                {
                    List<DocumentError> array = new List<DocumentError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentError.DeserializeDocumentError(item));
                    }
                    errors = array;
                    continue;
                }
                if (property.NameEquals("statistics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    statistics = RequestStatistics.DeserializeRequestStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("modelVersion"))
                {
                    modelVersion = property.Value.GetString();
                    continue;
                }
            }
            return new SentimentResponse(documents, errors, statistics.Value, modelVersion);
        }

        internal static SentimentResponse Deserialize(ref Utf8JsonReader reader)
        {
            IUtf8JsonDeserializable model = new SentimentResponse();
            model.Read(ref reader);
            return (SentimentResponse)model;
        }

        static readonly byte[] b_documents = Encoding.UTF8.GetBytes("documents");
        static readonly byte[] b_errors = Encoding.UTF8.GetBytes("errors");
        static readonly byte[] b_statistics = Encoding.UTF8.GetBytes("statistics");
        static readonly byte[] b_modelversion = Encoding.UTF8.GetBytes("modelVersion");

        void IUtf8JsonDeserializable.Read(ref Utf8JsonReader reader)
        {
            while (reader.Read())
            {
                switch (reader.TokenType)
                {
                    case JsonTokenType.StartObject:
                        break;

                    case JsonTokenType.EndObject:
                        return;

                    case JsonTokenType.StartArray:
                        break;

                    case JsonTokenType.EndArray:
                        break;

                    case JsonTokenType.PropertyName:
                        {
                            if (reader.ValueTextEquals(b_documents))
                            {
                                reader.Read();
                                var list = new List<DocumentSentiment>();
                                while (reader.Read() && reader.TokenType != JsonTokenType.EndArray)
                                {
                                    list.Add(DocumentSentiment.Deserialize(ref reader));
                                }
                                Documents = list.AsReadOnly();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_errors))
                            {
                                reader.Read();
                                var list = new List<DocumentError>();
                                while (reader.Read() && reader.TokenType != JsonTokenType.EndArray)
                                {
                                    list.Add(DocumentError.Deserialize(ref reader));
                                }
                                Errors = list.AsReadOnly();
                                continue;
                            }

                            if (reader.ValueTextEquals(b_statistics))
                            {
                                reader.Skip();
                                Statistics = RequestStatistics.Deserialize(ref reader);
                                continue;
                            }

                            if (reader.ValueTextEquals(b_modelversion))
                            {
                                reader.Skip();
                                ModelVersion = reader.GetString();
                                continue;
                            }
                        }
                        break;

                    default:
                        throw new NotSupportedException("Not supported token type " + reader.TokenType);
                }
            }
        }
    }
}
